# -*- coding: utf-8 -*-
# vim:set shiftwidth=4 softtabstop=4 expandtab textwidth=79:

import gdb
from crash.util.symbols import Types
from crash.subsystem.storage import block_device_name
from crash.subsystem.storage.decoders import Decoder, decode_bh
from crash.subsystem.filesystem import super_fstype

class DIOBioDecoder(Decoder):
    """
    Decodes a bio used for direct i/o.

    This method decodes a bio generated by the direct-io component of
    the file system subsystem.  The bio can either have been submitted
    directly or asynchronously.

    Args:
        bio(gdb.Value<struct bio>): The struct bio to be decoded, generated
            by the direct i/o component
    """

    types = Types([ 'struct dio *' ])
    __endio__ = [ 'dio_bio_end_io', 'dio_bio_end_io' ]
    description = "{:x} bio: Direct I/O for {} inode {}, sector {} on {}"

    def __init__(self, bio):
        super().__init__()
        self.bio = bio

    def interpret(self):
        self.dio = self.bio['bi_private'].cast(self.types.dio_p_type)
        self.fstype = super_fstype(self.dio['inode']['i_sb'])
        self.dev = block_device_name(self.dio['inode']['i_sb']['s_bdev'])
        self.offset = self.dio['block_in_file'] << self.dio['blkbits']

    def __str__(self):
        return self.description.format(int(self.bio), self.fstype,
                                       self.dio['inode']['i_ino'],
                                       self.bio['bi_sector'], self.dev)

    def __next__(self):
        return None

DIOBioDecoder.register()

class DecodeMPage(Decoder):
    """
    Decodes a bio used for multipage i/o.

    This method decodes a bio generated by the mpage component of
    the file system subsystem.

    Args:
        bio(gdb.Value<struct bio>): The struct bio to be decoded, generated
            by the mpage component

    Returns:
        dict: Contains the following items:
            - description (str): Human-readable description of the bio
            - bio (gdb.Value<struct bio>): The struct bio being decoded
            - fstype (str): The name of the file system which submitted
                this bio
            - inode (gdb.Value<struct inode>): The struct inode, if any,
                that owns the file associated with this bio
    """

    __endio__ = 'mpage_end_io'

    description = "{:x} bio: Multipage I/O: inode {}, type {}, dev {}"

    def __init__(self, bio):
        super().__init__()

        self.bio = bio

    def interpret(self):
        self.inode = bio['bi_io_vec'][0]['bv_page']['mapping']['host']
        self.fstype = super_fstype(inode['i_sb'])

    def __str__(self):
        return self.description.format(int(self.bio), self.inode['i_ino'],
                                       self.fstype,
                                       block_device_name(bio['bi_bdev']))

DecodeMPage.register()

class DecodeBioBH(Decoder):
    """
    Decodes a bio used to perform i/o for buffer_heads

    This method decodes a bio generated by buffer head submission.

    Args:
        bio(gdb.Value<struct bio>): The struct bio to be decoded, generated
            by buffer head submission

    """
    types = Types([ 'struct buffer_head *' ])
    __endio__ = 'end_bio_bh_io_sync'
    description = "{:x} bio: Bio representation of buffer head"

    def __init__(self, bio):
        super().__init__()
        self.bio = bio

    def interpret(self):
        self.bh = self.bio['bi_private'].cast(self.types.buffer_head_p_type)

    def __str__(self):
        return self.description.format(int(bio))

    def __next__(self):
        return decode_bh(self.bh)

DecodeBioBH.register()

class DecodeSyncWBBH(Decoder):
    """
    Decodes a struct buffer_head submitted by file systems for routine
    synchronous writeback.

    Args:
        bio(gdb.Value<struct buffer_head>): The struct buffer_head to be
            decoded.
    """
    __endio__  = 'end_buffer_write_sync'
    description = "{:x} buffer_head: for dev {}, block {}, size {} (unassociated)"

    def __init__(self, bh):
        super().__init__()
        self.bh = bh

    def __str__(self):
        self.description.format(block_device_name(bh['b_bdev']),
                                self.bh['b_blocknr'], self.bh['b_size'])

DecodeSyncWBBH.register()
